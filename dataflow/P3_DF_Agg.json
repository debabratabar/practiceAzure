{
	"name": "P3_DF_Agg",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_dp203_CustomerAddress",
						"type": "DatasetReference"
					},
					"name": "CustomerAddresTable",
					"description": "Getting customerId , AddressId from \"CustomerAddres\" table "
				},
				{
					"dataset": {
						"referenceName": "DS_dp203_Address",
						"type": "DatasetReference"
					},
					"name": "AddressTable",
					"description": "Getting Address details from \"Address\" table "
				},
				{
					"dataset": {
						"referenceName": "DS_dp203_SalesOrderHeader",
						"type": "DatasetReference"
					},
					"name": "SalesOrderHeaderTable",
					"description": "Getting sales data of Customers"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_dp203_CountrySales",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1",
					"description": "Geeting Customer Id & country_region Detials"
				},
				{
					"name": "join2"
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "CountrySalesAggregate",
					"description": "Getting countrywise total sales"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as integer,",
				"          AddressID as integer,",
				"          AddressType as string,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT CustomerID , AddressID  FROM \\n[SalesLT].[CustomerAddress] ',",
				"     format: 'query') ~> CustomerAddresTable",
				"source(output(",
				"          AddressID as integer,",
				"          AddressLine1 as string,",
				"          AddressLine2 as string,",
				"          City as string,",
				"          StateProvince as string,",
				"          CountryRegion as string,",
				"          PostalCode as string,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT AddressID ,CountryRegion   FROM\\n[SalesLT].[Address]     ',",
				"     format: 'query') ~> AddressTable",
				"source(output(",
				"          SalesOrderID as integer,",
				"          RevisionNumber as integer,",
				"          OrderDate as timestamp,",
				"          DueDate as timestamp,",
				"          ShipDate as timestamp,",
				"          Status as integer,",
				"          OnlineOrderFlag as boolean,",
				"          SalesOrderNumber as string,",
				"          PurchaseOrderNumber as string,",
				"          AccountNumber as string,",
				"          CustomerID as integer,",
				"          ShipToAddressID as integer,",
				"          BillToAddressID as integer,",
				"          ShipMethod as string,",
				"          CreditCardApprovalCode as string,",
				"          SubTotal as decimal(19,4),",
				"          TaxAmt as decimal(19,4),",
				"          Freight as decimal(19,4),",
				"          TotalDue as decimal(19,4),",
				"          Comment as string,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT CustomerID , TotalDue  FROM [SalesLT].[SalesOrderHeader] ',",
				"     format: 'query') ~> SalesOrderHeaderTable",
				"CustomerAddresTable, AddressTable join(CustomerAddresTable@AddressID == AddressTable@AddressID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"select2, SalesOrderHeaderTable join(select2@CustomerID == SalesOrderHeaderTable@CustomerID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 select(mapColumn(",
				"          CustomerID = select2@CustomerID,",
				"          AddressID,",
				"          CountryRegion,",
				"          TotalSales = TotalDue",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"join1 select(mapColumn(",
				"          CustomerID,",
				"          AddressID = AddressTable@AddressID,",
				"          CountryRegion",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select1 aggregate(groupBy(CountryRegion),",
				"     TotalSales = sum(TotalSales)) ~> CountrySalesAggregate",
				"CountrySalesAggregate sink(allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     input(",
				"          CountryRegion as string,",
				"          TotalSales as decimal(19,4)",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          CountryRegion,",
				"          TotalSales",
				"     )) ~> sink1"
			]
		}
	}
}